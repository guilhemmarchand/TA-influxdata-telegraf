# props.conf

#  __  __ _____ _____ ____  ___ ____   ____ _____ ___  ____  _____ 
# |  \/  | ____|_   _|  _ \|_ _/ ___| / ___|_   _/ _ \|  _ \| ____|
# | |\/| |  _|   | | | |_) || | |     \___ \ | || | | | |_) |  _|  
# | |  | | |___  | | |  _ < | | |___   ___) || || |_| |  _ <| |___ 
# |_|  |_|_____| |_| |_| \_\___\____| |____/ |_| \___/|_| \_\_____|
#                                                                 

# Telegraf metrics ingested in the metric store in Graphite tags format

#   ____                 _     _ _       
#  / ___|_ __ __ _ _ __ | |__ (_) |_ ___ 
# | |  _| '__/ _` | '_ \| '_ \| | __/ _ \
# | |_| | | | (_| | |_) | | | | | ||  __/
#  \____|_|  \__,_| .__/|_| |_|_|\__\___|
#               |_|                    
#

# Telegraf output plugins must refer to the following format:

#  data_format = "graphite"
#  graphite_tag_support = true

# If you ingest metric via tcp/tcp-ssl input

[tcp:telegraf:graphite]
LINE_BREAKER = ([\n\r]+)
TRUNCATE = 0
TIME_PREFIX = [^\s]*\s[^\s]*\s
TIME_FORMAT =  %s
NO_BINARY_CHECK = true
SHOULD_LINEMERGE = false
pulldown_type = 1
TRANSFORMS-tcp_telegraf_graphite = telegraf_graphite_host, telegraf_graphite_metric_name, telegraf_graphite_metric_dimension, telegraf_graphite_metric_value
category = Metrics

# If you ingest metric via Kafka (same format than tcp with routing malformed events, aka blank lines, to null queue, see transforms.conf)

[kafka:telegraf:graphite]
LINE_BREAKER = ([\n\r]+)
TRUNCATE = 0
TIME_PREFIX = [^\s]*\s[^\s]*\s
TIME_FORMAT =  %s
NO_BINARY_CHECK = true
SHOULD_LINEMERGE = false
pulldown_type = 1
TRANSFORMS-kafka_telegraf_graphite = kafka_empty_malformed_setnull, telegraf_graphite_host, telegraf_graphite_metric_name, telegraf_graphite_metric_dimension, telegraf_graphite_metric_value
category = Metrics

# If you ingest metric via Splunk file monitoring (full Splunk instance or Universal forwarder) using the telegraf file output plugin

[file:telegraf:graphite]
LINE_BREAKER = ([\n\r]+)
TRUNCATE = 0
TIME_PREFIX = [^\s]*\s[^\s]*\s
TIME_FORMAT =  %s
NO_BINARY_CHECK = true
SHOULD_LINEMERGE = false
pulldown_type = 1
TRANSFORMS-file_telegraf_graphite = telegraf_graphite_host, telegraf_graphite_metric_name, telegraf_graphite_metric_dimension, telegraf_graphite_metric_value
category = Metrics


#  __  __ _____ _____ ____  ___ ____ ____       _    ____
# |  \/  | ____|_   _|  _ \|_ _/ ___/ ___|     / \  / ___|
# | |\/| |  _|   | | | |_) || | |   \___ \    / _ \ \___ \
# | |  | | |___  | | |  _ < | | |___ ___) |  / ___ \ ___) |
# |_|  |_|_____| |_| |_| \_\___\____|____/  /_/   \_\____/
#
#  _______     _______ _   _ _____ ____
# | ____\ \   / / ____| \ | |_   _/ ___|
# |  _|  \ \ / /|  _| |  \| | | | \___ \
# | |___  \ V / | |___| |\  | | |  ___) |
# |_____|  \_/  |_____|_| \_| |_| |____/
#

# Telegraf metrics ingested as events

#  ____                    _                 
# |  _ \ __ ___      __   (_)___  ___  _ __  
# | |_) / _` \ \ /\ / /   | / __|/ _ \| '_ \ 
# |  _ < (_| |\ V  V /    | \__ \ (_) | | | |
# |_| \_\__,_| \_/\_/    _/ |___/\___/|_| |_|
#                       |__/                 
#

# Ingestion of telegraf metric in raw json data via Kafka
# This assumes you use the raw HEC endpoint and a line breaker in the Kafka connect configuration

# "splunk.hec.raw": "true",
# "splunk.hec.raw.line.breaker": "####",

[kafka:telegraf:json] # sourcetype name
LINE_BREAKER = (####)
TRUNCATE = 0
TIME_PREFIX="timestamp":
TIME_FORMAT=%s%3N
NO_BINARY_CHECK = true
SHOULD_LINEMERGE = false
TRANSFORMS-kafka_telegraf_meta = kafka_telegraf_json_raw_host
KV_MODE = json
